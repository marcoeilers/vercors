/*
This file is a sketch of the choreography for the TTTmsg case study. It assumes the Move.pvl, Player.pvl files from the TTT+ case study are in scope and appropriately renamed. While we cannot guarantee the correctness of TTTmsg, we have successfully verified a manually encoded version of this file.
*/

inline resource turnInvariant(Player p, Player q) = 
  ([1\2]p.boardPerm()) **
  ([1\2]q.boardPerm()) **
  p.equalBoard(q)
  ;

choreography Main() {

  endpoint p1 = Player(0, true);
  endpoint p2 = Player(1, false);

  requires p1.inv() ** p2.inv();
  requires p1.emptyBoard() ** p2.emptyBoard();
  requires (\endpoint p1; p1.turn ==> turnInvariant(p1, p2));
  requires (\endpoint p2; p2.turn ==> turnInvariant(p2, p1));
  ensures p1.gameFinished() && p2.gameFinished();
  ensures (\endpoint p1;
    ([3\4]p1.boardPerm()) **
    ([1\4]p2.boardPerm()) **
    p1.equalBoard(p2)
  );
  ensures (\endpoint p2;
    ([3\4]p2.boardPerm()) **
    ([1\4]p1.boardPerm()) **
    p2.equalBoard(p1))
  run {
    loop_invariant (p1.turn ==> turnInvariant(p1));
    loop_invariant (p2.turn ==> turnInvariant(p2));
    while(!p1.gameFinished() && !p2.gameFinished()) {
      assert p1.turn == !p2.turn;
      if(p1.turn && !p2.turn) {
        p1.createNewMove();
        channel_invariant 
          \msg.movePerm() ** 
          ([1\2]\sender.boardPerm()) ** ([1\2]\receiver.boardPerm()) **
          \sender.oneMoveAheadOf(\msg, \receiver);
        communicate p2.move <- p1.move;
      } else {
        p2.createNewMove();
        channel_invariant 
          \msg.movePerm() ** 
          ([1\2]\sender.boardPerm()) ** ([1\2]\receiver.boardPerm()) **
          \sender.oneMoveAheadOf(\msg, \receiver);
        communicate p1.move <- p2.move;
      }
      p1.doMove();
      p2.doMove();
      p1.turn := !p1.turn;
      p2.turn := !p2.turn;
    }

    if (p1.turn && !p2.turn) {
      // Send "true" from p1 to p2. p2 discards the value immediately.
      // This turns the communicate statement into a barrier for p1 and p2. 
      // Meaning they both have to send/receive before they can continue.
      channel_invariant \msg **
        [1\4]\sender.boardPerm() **
        [1\4]\receiver.boardPerm() **
        \receiver.equalBoard(\sender);
      communicate p2 <- p1: true;
    } else {
      channel_invariant \msg **
        [1\4]p2.boardPerm() **
        [1\4]p1.boardPerm() **
        p2.equalBoard(p1);
      communicate p1 <- p2: true;
    }
  }
}
