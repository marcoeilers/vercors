lock_invariant Perm(transferring, 1) ** Perm(exchangeValue,1);
class Chan<T> {
  boolean transferring;
  T exchangeValue;

  ensures committed(this);
  constructor() {
    transferring = false;
    commit this;
  }

  context committed(this);
  void writeValue(T v) {
    lock this;

    loop_invariant Perm(transferring, 1) ** Perm(exchangeValue,1);
    loop_invariant held(this);
    while (!transferring) {
      unlock this;
      lock this;
    }

    transferring = false;
    exchangeValue = v;
    unlock this;
  }

  context committed(this);
  T readValue() {
    lock this;

    loop_invariant Perm(transferring, 1) ** Perm(exchangeValue,1);
    loop_invariant held(this);
    while (transferring) {
      unlock this;
      lock this;
    }

    T m = exchangeValue;
    transferring = false;
    unlock this;

    return m;
  }

  context committed(this);
  T noop(T t) {
    writeValue(t);
    return readValue();
  }
}

void main() {
  Chan<int> intChan = new Chan<int>();
  Chan<boolean> boolChan = new Chan<boolean>();
  Chan<Chan<int>> intChanChan = new Chan<Chan<int>>();

  intChan.writeValue(5);
  boolChan.writeValue(true);
  intChanChan.writeValue(intChan);

  int i = intChan.readValue();
  boolean b = boolChan.readValue();
  Chan<int> c = intChanChan.readValue();
}