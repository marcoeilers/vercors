context_everywhere input != null;
context_everywhere input.length == size;
context_everywhere size > 0;
context |inp_seq| == size;
context (\forall* int i; i >= 0 && i < size; Perm(input[i], write));
yields seq<int> out_seq;
requires (\forall int i; 0 <= i && i < size; input[i] == inp_seq[i]);
ensures |out_seq| == size;
ensures (\forall int i; 0 <= i && i < size; input[i] == out_seq[i]);
ensures isPermutation<int>(inp_seq, out_seq);
void insertion(int[] input, int size, seq<int> inp_seq){
    int outerLoop = 1;
    int innerLoop = 0;
    int temp;
    out_seq = inp_seq;

    loop_invariant outerLoop >= 1 && outerLoop <= size;
    loop_invariant (\forall* int i; i >= 0 && i < size; Perm(input[i], write));
    loop_invariant |out_seq| == size;
    loop_invariant (\forall int i; 0 <= i && i < size; input[i] == out_seq[i]);
    loop_invariant isPermutation<int>(inp_seq, out_seq);
    while(outerLoop < size){
            innerLoop = outerLoop;

            loop_invariant outerLoop >= 1 && outerLoop < size;
            loop_invariant innerLoop >= 0 && innerLoop <= outerLoop;
            loop_invariant (\forall* int i; i >= 0 && i < size; Perm(input[i], write));
            loop_invariant |out_seq| == size;
            loop_invariant (\forall int i; 0 <= i && i < size; input[i] == out_seq[i]);
            loop_invariant isPermutation<int>(inp_seq, out_seq);
            while(innerLoop > 0 && input[innerLoop-1] > input[innerLoop]){
                lemma_permutation_apply<int>(inp_seq, out_seq, innerLoop-1, innerLoop);

                temp = input[innerLoop-1];
                input[innerLoop-1] = input[innerLoop];
                out_seq = out_seq[innerLoop-1 -> input[innerLoop]];
                input[innerLoop] = temp;
                out_seq = out_seq[innerLoop -> temp];

                innerLoop = innerLoop - 1;
            }
            outerLoop = outerLoop + 1;
    }

}